
namespace = mafoe_recalculate_development

# Calculates the progress of development growth of all provinces of one country.
# Is called every 2 years by on_action pulse.

country_event = {
	id = mafoe_recalculate_development.1
	title = "wont_translate.title"
	desc = "wont_translate.desc"
	picture = CITY_DEVELOPMENT_eventPicture

	hidden = yes
	is_triggered_only = yes

    immediate = {
        hidden_effect = {

            every_owned_province = {

        # grab these modifiers for use in the calculations
                export_to_variable = { which = ldc value = modifier:local_development_cost }
                export_to_variable = { which = gdc value = modifier:development_cost who = ROOT }
        # normalize these modifiers so we can simply multiply them as factor later on
                # ldc usually between -0.5 (great) and 0.5 (bad), so let's negate and add 1
                multiply_variable = { which = ldc value = -1 }
                change_variable = { which = ldc value = 1 }
                # gdc is usually between -1 (great) and 1 (bad), so let's negate and add 1
                multiply_variable = { which = gdc value = -1 }
                change_variable = { which = gdc value = 1 }
        # counter the lovely scaled development effect that adds ldc depending on how high dev is
        # this allows us to still have increasing development cost for manual development (clicking the button), while
        #  NOT having the dynamic dev growth be stunted by the scaled dev cost
                if = {
                    # only apply formula at dev 10 or more
                    limit = {
                        development = 10
                    }
                    export_to_variable = { which = dev value = development }

                    set_variable = { which = temp which = dev }
                    subtract_variable = { which = temp value = 9 }
                    multiply_variable = { which = temp value = 0.03 }
                    change_variable = { which = scaled_dev_malus which = temp }
                    if = { limit = { development = 20 }
                        set_variable = { which = temp which = dev }
                        subtract_variable = { which = temp value = 19 }
                        multiply_variable = { which = temp value = 0.03 }
                        change_variable = { which = scaled_dev_malus which = temp }
                    }
                    if = { limit = { development = 30 }
                        set_variable = { which = temp which = dev }
                        subtract_variable = { which = temp value = 29 }
                        multiply_variable = { which = temp value = 0.03 }
                        change_variable = { which = scaled_dev_malus which = temp }
                    }
                    if = { limit = { development = 40 }
                        set_variable = { which = temp which = dev }
                        subtract_variable = { which = temp value = 39 }
                        multiply_variable = { which = temp value = 0.03 }
                        change_variable = { which = scaled_dev_malus which = temp }
                    }
                    if = { limit = { development = 50 }
                        set_variable = { which = temp which = dev }
                        subtract_variable = { which = temp value = 49 }
                        multiply_variable = { which = temp value = 0.03 }
                        change_variable = { which = scaled_dev_malus which = temp }
                    }
                    if = { limit = { development = 60 }
                        set_variable = { which = temp which = dev }
                        subtract_variable = { which = temp value = 59 }
                        multiply_variable = { which = temp value = 0.03 }
                        change_variable = { which = scaled_dev_malus which = temp }
                    }
                    if = { limit = { development = 70 }
                        set_variable = { which = temp which = dev }
                        subtract_variable = { which = temp value = 69 }
                        multiply_variable = { which = temp value = 0.03 }
                        change_variable = { which = scaled_dev_malus which = temp }
                    }
                    if = { limit = { development = 80 }
                        set_variable = { which = temp which = dev }
                        subtract_variable = { which = temp value = 79 }
                        multiply_variable = { which = temp value = 0.03 }
                        change_variable = { which = scaled_dev_malus which = temp }
                    }
                    if = { limit = { development = 90 }
                        set_variable = { which = temp which = dev }
                        subtract_variable = { which = temp value = 89 }
                        multiply_variable = { which = temp value = 0.03 }
                        change_variable = { which = scaled_dev_malus which = temp }
                    }
                    if = { limit = { development = 100 }
                        set_variable = { which = temp which = dev }
                        subtract_variable = { which = temp value = 99 }
                        multiply_variable = { which = temp value = 0.03 }
                        change_variable = { which = scaled_dev_malus which = temp }
                    }
                    if = { limit = { development = 110 }
                        set_variable = { which = temp which = dev }
                        subtract_variable = { which = temp value = 109 }
                        multiply_variable = { which = temp value = 0.03 }
                        change_variable = { which = scaled_dev_malus which = temp }
                    }
                    # don't account for higher dev cause I cba
                    if = { limit = { development = 120 }
                        set_variable = { which = temp which = dev }
                        subtract_variable = { which = temp value = 119 }
                        multiply_variable = { which = temp value = 0.03 }
                        change_variable = { which = scaled_dev_malus which = temp }
                    }

                    #finally add our calculated value to the ldc to counter the scaled dev malus in the ldc
                    change_variable = { which = ldc which = scaled_dev_malus }
                    # remove temp variables
                    set_variable = { which = scaled_dev_malus value = 0 }
                    set_variable = { which = dev value = 0 }
                    set_variable = { which = temp value = 0 }
                }

        # can't grab development efficiency for some reason, so this gotta do
        # has 3 tiers from all 3 tech, each is 0.1 or 10%, at tech 17, 23, 27
        # gotta ask for techs because there is no way to programmatically check development_efficiency
        # Thanks, Paradox!
                # doesn't do anything before tech 17
                set_variable = { which = gde value = 1 }
                if = {
                    limit = {
                        owner = {
                            adm_tech = 17
                        }
                    }
                    set_variable = { which = gde value = 1.1 }
                }
                if = {
                    limit = {
                        owner = {
                            adm_tech = 23
                        }
                    }
                    set_variable = { which = gde value = 1.2 }
                }
                if = {
                    limit = {
                        owner = {
                            adm_tech = 27
                        }
                    }
                    set_variable = { which = gde value = 1.3 }
                }


        # initialise these variables with flat growth of 5 points for all
                set_variable = { which = temp_tax value = 5 }
                set_variable = { which = temp_prod value = 5 }
                set_variable = { which = temp_mp value = 5 }

         #############
         # Now multiply flat growth with all the yummy multipliers
         # factors are:
         #   - non yummy 50% penalty to make this formulae work
         #   - local development cost (from terrain and such), called ldc
         #   - development cost (this is global), called gdc
         #   - development efficiency (has 3 tiers from adm tech, each is 0.1 or 10%), called gde
         #   - growth boost active (decision, one per monarch power)
         #   - some special cases, like tradegood & colonies
         #############

                # malus, used to balance the numbers
                multiply_variable = { which = temp_tax value = 0.5 }
                multiply_variable = { which = temp_prod value = 0.5 }
                multiply_variable = { which = temp_mp value = 0.5 }
                #ldc
                multiply_variable = { which = temp_tax which = ldc }
                multiply_variable = { which = temp_prod which = ldc }
                multiply_variable = { which = temp_mp which = ldc }
                #gdc
                multiply_variable = { which = temp_tax which = gdc }
                multiply_variable = { which = temp_prod which = gdc }
                multiply_variable = { which = temp_mp which = gdc }
                #gde
                multiply_variable = { which = temp_tax which = gde }
                multiply_variable = { which = temp_prod which = gde }
                multiply_variable = { which = temp_mp which = gde }

        		# slower for colonies (+50%)
                if = {
                    limit = {
                        is_colony = yes
                    }
                    multiply_variable = { which = temp_tax value = 0.5 }
                    multiply_variable = { which = temp_prod value = 0.5 }
                    multiply_variable = { which = temp_mp value = 0.5 }
                }

        		# if tradegood is wheat, fish, salt, then tax and manpower grow faster
        		# equals -10%/-20% development cost bonus for tax/mp
        		# finally something useful from these!
                if = {
                    limit = {
                        OR = {
                            trade_goods = grain
                            trade_goods = fish
                            trade_goods = salt
                        }
                    }
                    multiply_variable = { which = temp_tax value = 1.1 }
                    multiply_variable = { which = temp_mp value = 1.2 }
                }

        		# faster when taxation/production/manpower boosts are active
                if = {
                    limit = {
            			owner = {
                			has_country_modifier = tax_growth_boosted
                        }
                    }
                    multiply_variable = { which = temp_tax value = 1.5 }
                }
                if = {
                    limit = {
            			owner = {
                			has_country_modifier = production_growth_boosted
                        }
                    }
                    multiply_variable = { which = temp_prod value = 1.5 }
                }
                if = {
                    limit = {
            			owner = {
                			has_country_modifier = manpower_growth_boosted
                        }
                    }
                    multiply_variable = { which = temp_mp value = 1.5 }
                }

                # now for the buildings... uch
                # can't do this by slapping local_development_cost on each building because each building is
                # supposed to only improve that development it belongs to, aka production buildings should only
                # boost production growth, not tax or manpower growth (special case: university)

                # tax buildings first...
                if = {
                    limit = {
            			has_building = temple
                    }
                    multiply_variable = { which = temp_tax value = 1.2 }
                }
                if = {
                    limit = {
            			has_building = cathedral
                    }
                    multiply_variable = { which = temp_tax value = 1.4 }
                }
                if = {
                    limit = {
            			has_building = courthouse
                    }
                    multiply_variable = { which = temp_tax value = 1.2 }
                }
                if = {
                    limit = {
            			has_building = town_hall
                    }
                    multiply_variable = { which = temp_tax value = 1.4 }
                }

                # ...production buildings second...
                if = {
                    limit = {
            			has_building = workshop
                    }
                    multiply_variable = { which = temp_prod value = 1.2 }
                }
                if = {
                    limit = {
            			has_building = counting_house
                    }
                    multiply_variable = { which = temp_prod value = 1.4 }
                }
                if = {
                    limit = {
            			has_building = marketplace
                    }
                    multiply_variable = { which = temp_prod value = 1.2 }
                }
                if = {
                    limit = {
            			has_building = trade_depot
                    }
                    multiply_variable = { which = temp_prod value = 1.4 }
                }
                if = {
                    limit = {
            			has_building = stock_exchange
                    }
                    multiply_variable = { which = temp_prod value = 1.6 }
                }

                # ...manufactories third...
                if = {
                    limit = {
            			has_building = wharf
                    }
                    multiply_variable = { which = temp_prod value = 1.6 }
                }
                if = {
                    limit = {
            			has_building = weapons
                    }
                    multiply_variable = { which = temp_prod value = 1.6 }
                }
                if = {
                    limit = {
            			has_building = textile
                    }
                    multiply_variable = { which = temp_prod value = 1.6 }
                }
                if = {
                    limit = {
            			has_building = plantations
                    }
                    multiply_variable = { which = temp_prod value = 1.6 }
                }
                if = {
                    limit = {
            			has_building = tradecompany
                    }
                    multiply_variable = { which = temp_prod value = 1.6 }
                }

                # ...military buildings fourth... (kill me nao!)
                if = {
                    limit = {
            			has_building = barracks
                    }
                    multiply_variable = { which = temp_mp value = 1.2 }
                }
                if = {
                    limit = {
            			has_building = training_fields
                    }
                    multiply_variable = { which = temp_mp value = 1.4 }
                }
                if = {
                    limit = {
            			has_building = regimental_camp
                    }
                    multiply_variable = { which = temp_mp value = 1.2 }
                }
                if = {
                    limit = {
            			has_building = conscription_center
                    }
                    multiply_variable = { which = temp_mp value = 1.4 }
                }
                if = {
                    limit = {
            			has_building = shipyard
                    }
                    multiply_variable = { which = temp_mp value = 1.2 }
                }
                if = {
                    limit = {
            			has_building = dock
                    }
                    multiply_variable = { which = temp_mp value = 1.2 }
                }
                if = {
                    limit = {
            			has_building = grand_shipyard
                    }
                    multiply_variable = { which = temp_mp value = 1.4 }
                }
                if = {
                    limit = {
            			has_building = drydock
                    }
                    multiply_variable = { which = temp_mp value = 1.4 }
                }

                # ...and forts last.
                if = {
                    limit = {
            			has_building = fort_15th
                    }
                    multiply_variable = { which = temp_mp value = 1.2 }
                }
                if = {
                    limit = {
            			has_building = fort_16th
                    }
                    multiply_variable = { which = temp_mp value = 1.3 }
                }
                if = {
                    limit = {
            			has_building = fort_17th
                    }
                    multiply_variable = { which = temp_mp value = 1.4 }
                }
                if = {
                    limit = {
            			has_building = fort_18th
                    }
                    multiply_variable = { which = temp_mp value = 1.5 }
                }

                if = {
                    limit = {
                        has_building = university
                    }
                    multiply_variable = { which = temp_tax value = 1.3 }
                    multiply_variable = { which = temp_prod value = 1.3 }
                    multiply_variable = { which = temp_mp value = 1.3 }
                }


    #TODO looted, blockaded

            # slower with unrest
            # unrest is a special case. it can lead to negative growth
            # formula: if unrest is >= 0.5, then add (-1 * unrest - 1.5) to the progress
            # since we multiply flat growth and bonuses before we subtract a flat unrest penalty,  it is possible
            # to "power through" unrest later on in the game and have growing development despite unrest
                if = {
                    limit = {
            			unrest = 0.5
                    }
                    set_variable = { which = temp value = -1.2 }
                    multiply_variable = { which = temp which = unrest }
                    subtract_variable = { which = temp value = 1.5 }
                    change_variable = { which = temp_tax which = temp }
                    change_variable = { which = temp_prod which = temp }
                    change_variable = { which = temp_mp which = temp }
                }

        ###### finally done! ######

        # add the temp values that we calculated in this event to the persistent progress
                change_variable = { which = tax_progress which = temp_tax }
                change_variable = { which = production_progress which = temp_prod }
                change_variable = { which = manpower_progress which = temp_mp }

        # If progress is >= 100, then increase base dev and reduce progress by 100
        # no need to check for >= 200 with current balancing
                if = {
                    limit = {
                        check_variable = { which = tax_progress value = 100 }
                    }
                    add_base_tax = 1
                    subtract_variable = { which = tax_progress value = 100 }
                }
                if = {
                    limit = {
                        check_variable = { which = production_progress value = 100 }
                    }
                    add_base_production = 1
                    subtract_variable = { which = production_progress value = 100 }
                }
                if = {
                    limit = {
                        check_variable = { which = manpower_progress value = 100 }
                    }
                    add_base_manpower = 1
                    subtract_variable = { which = manpower_progress value = 100 }
                }

        # gotta check negative growth, too

                if = {
                    limit = {
                        NOT = { check_variable = { which = tax_progress value = -100 }}
                    }
                    add_base_tax = -1
                    change_variable = { which = tax_progress value = 100 }
                }

                if = {
                    limit = {
                        NOT = { check_variable = { which = production_progress value = -100 }}
                    }
                    add_base_production = -1
                    change_variable = { which = production_progress value = 100 }
                }

                if = {
                    limit = {
                        NOT = { check_variable = { which = manpower_progress value = -100 }}
                    }
                    add_base_manpower = -1
                    change_variable = { which = manpower_progress value = 100 }
                }

        # set all unneeded variables to 0 so they don't appear in the save game files
                    set_variable = { which = temp_tax value = 0 }
                    set_variable = { which = temp_prod value = 0 }
                    set_variable = { which = temp_mp value = 0 }
                    set_variable = { which = temp value = 0 }
                    set_variable = { which = ldc value = 0 }
                    set_variable = { which = gdc value = 0 }
                    set_variable = { which = gde value = 0 }

        # NOW we're done... phew
            }
        }
    }

	option = {
		name = "wont_translate"
	}
}